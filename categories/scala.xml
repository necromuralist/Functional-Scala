<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Functional Scala (Posts about scala)</title><link>https://necromuralist.github.io/Functional-Scala/</link><description></description><atom:link href="https://necromuralist.github.io/Functional-Scala/categories/scala.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents Â© 2019 &lt;a href="mailto:necromuralist@protonmail.com"&gt;Cloistered Monkey&lt;/a&gt; </copyright><lastBuildDate>Fri, 13 Dec 2019 05:25:30 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Traits Are Closer To Abstract Classes</title><link>https://necromuralist.github.io/Functional-Scala/posts/hello-scala/traits-are-closer-to-abstract-classes/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Functional-Scala/posts/hello-scala/traits-are-closer-to-abstract-classes/#orgeca601e"&gt;Beginning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Functional-Scala/posts/hello-scala/traits-are-closer-to-abstract-classes/#orgd981bdb"&gt;Middle&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Functional-Scala/posts/hello-scala/traits-are-closer-to-abstract-classes/#orgf36649b"&gt;Abstract and Concrete Methods&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Functional-Scala/posts/hello-scala/traits-are-closer-to-abstract-classes/#org95d79d1"&gt;Traits&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Functional-Scala/posts/hello-scala/traits-are-closer-to-abstract-classes/#org3248c07"&gt;Boy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Functional-Scala/posts/hello-scala/traits-are-closer-to-abstract-classes/#orgce876df"&gt;A Girl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Functional-Scala/posts/hello-scala/traits-are-closer-to-abstract-classes/#org37d7d6a"&gt;A Werewolf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Functional-Scala/posts/hello-scala/traits-are-closer-to-abstract-classes/#org564ea48"&gt;But There's Also An Abstract Class&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Functional-Scala/posts/hello-scala/traits-are-closer-to-abstract-classes/#org2d4a4cd"&gt;End&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgeca601e" class="outline-2"&gt;
&lt;h2 id="orgeca601e"&gt;Beginning&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgeca601e"&gt;
&lt;p&gt;
Traits are both similar and different from &lt;a href="https://docs.oracle.com/javase/tutorial/java/concepts/interface.html"&gt;Interfaces&lt;/a&gt; and &lt;a href="https://docs.oracle.com/javase/tutorial/java/IandI/abstract.html"&gt;Abstract Classes&lt;/a&gt;. Like Interfaces, traits don't take arguments, but unlike interfaces and like Abstract Classes, traits can implement some methods and leave others abstract. Traits also support multiple inheritance and you can add them to objects that are created from Classes that don't extend them in their definition.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgd981bdb" class="outline-2"&gt;
&lt;h2 id="orgd981bdb"&gt;Middle&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgd981bdb"&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgf36649b" class="outline-3"&gt;
&lt;h3 id="orgf36649b"&gt;Abstract and Concrete Methods&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgf36649b"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org95d79d1" class="outline-4"&gt;
&lt;h4 id="org95d79d1"&gt;Traits&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org95d79d1"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;trait Child {
  def speak(): Unit = println("Never. I must be seen but not heard.")
  def come_to_me(): Unit
}
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
This trait has a concrete method (&lt;code&gt;speak&lt;/code&gt;) and an abstract method &lt;code&gt;come_to_me&lt;/code&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org3248c07" class="outline-4"&gt;
&lt;h4 id="org3248c07"&gt;Boy&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org3248c07"&gt;
&lt;p&gt;
If you don't implement the &lt;code&gt;come_to_me&lt;/code&gt; method then the next definition will be rejected by the compiler.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;class Boy(name: String) extends Child {
  def come_to_me(): Unit = println(s"I, $name, will be there at once.")
}
&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;val boy = new Boy("Alphonse")
boy.speak()
boy.come_to_me()
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
Never. I must be seen but not heard.
I, Alphonse, will be there at once.

&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgce876df" class="outline-4"&gt;
&lt;h4 id="orgce876df"&gt;A Girl&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgce876df"&gt;
&lt;p&gt;
You can also implement the &lt;code&gt;speak&lt;/code&gt; method, but since it's concrete you need to override it instead of just implement it.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;class Girl extends Child {
  override def speak(): Unit = println("Whatever...")
  def come_to_me(): Unit = println("As if.")
}
&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;val girl = new Girl
girl.speak
girl.come_to_me
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
Whatever...
As if.

&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org37d7d6a" class="outline-4"&gt;
&lt;h4 id="org37d7d6a"&gt;A Werewolf&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org37d7d6a"&gt;
&lt;p&gt;
You can also add a trait to an existing class.
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;trait Tail {
  def wag(): Unit = println("I'm quite happy.")
}
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Now we can add it to a Boy object using &lt;code&gt;with&lt;/code&gt; (because it already &lt;code&gt;extends&lt;/code&gt; &lt;code&gt;Child&lt;/code&gt;).
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;val wolfboy = new Boy("Benji") with Tail

wolfboy.speak
wolfboy.come_to_me
wolfboy.wag
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
Never. I must be seen but not heard.
I, Benji, will be there at once.
I'm quite happy.

&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org564ea48" class="outline-3"&gt;
&lt;h3 id="org564ea48"&gt;But There's Also An Abstract Class&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org564ea48"&gt;
&lt;p&gt;
Scala also provides an Abstract Class, this is to handle two cases:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;You want to define arguments to the constructor in the base class&lt;/li&gt;
&lt;li&gt;You want to call scala code from Java&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
One thing to note about traits is that they don't take arguments to the constructor so if you want to define some in the base class you need to use the &lt;code&gt;abstract class&lt;/code&gt; type instead of a trait. The trade-off is that Abstract Classes don't support multiple inheritance the way that traits do (so our wolfboy would need a separate abstract class since it has both Child and Tail traits), so you'll lose something if you choose to use them.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org2d4a4cd" class="outline-2"&gt;
&lt;h2 id="org2d4a4cd"&gt;End&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org2d4a4cd"&gt;
&lt;p&gt;
Being mostly a python programmer I'm not totally certain what Interfaces are for, but luckily, with traits, we can have the best of both Interfaces and Abstract Classes together.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>hello scala</category><category>scala</category><category>traits</category><guid>https://necromuralist.github.io/Functional-Scala/posts/hello-scala/traits-are-closer-to-abstract-classes/</guid><pubDate>Tue, 10 Dec 2019 00:53:28 GMT</pubDate></item><item><title>Traits As Interfaces</title><link>https://necromuralist.github.io/Functional-Scala/posts/hello-scala/traits-as-interfaces/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Functional-Scala/posts/hello-scala/traits-as-interfaces/#orgbef3b7b"&gt;Beginning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Functional-Scala/posts/hello-scala/traits-as-interfaces/#org2938dee"&gt;Middle&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Functional-Scala/posts/hello-scala/traits-as-interfaces/#org2e16d1c"&gt;Some Traits&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Functional-Scala/posts/hello-scala/traits-as-interfaces/#org7dfa6f9"&gt;Create a Cow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Functional-Scala/posts/hello-scala/traits-as-interfaces/#orgde84147"&gt;End&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgbef3b7b" class="outline-2"&gt;
&lt;h2 id="orgbef3b7b"&gt;Beginning&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgbef3b7b"&gt;
&lt;p&gt;
This is a look at Scala traits. The traits look sort of like abstract base classes, but they are used here to define "parts" for classes that can then be implemented to create a specific type.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org2938dee" class="outline-2"&gt;
&lt;h2 id="org2938dee"&gt;Middle&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org2938dee"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org2e16d1c" class="outline-3"&gt;
&lt;h3 id="org2e16d1c"&gt;Some Traits&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org2e16d1c"&gt;
&lt;p&gt;
These are some traits to make up an animal. Viewed in this context, the name "traits" makes sense - each trait defines a different aspect of the animal class.
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;trait Tail {
  def wag(): Unit
  def stop_wagging(): Unit
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
&lt;b&gt;&lt;b&gt;Note:&lt;/b&gt;&lt;/b&gt; I originally called those methods &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;stop&lt;/code&gt; but when you create the class all the methods are going to get a concrete definition, so you don't want them to be too generic or they might clash across different traits.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;trait Legs {
  def move(): Unit
  def stand(): Unit
}
&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;trait Voice {
 def speak(): String
}
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Now when you create the class you can extend one of the traits and add more using the &lt;code&gt;with&lt;/code&gt; keyword, implementing the methods in a way that makes sense for the concrete class.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;class Cow extends Tail with Legs with Voice {
  // Tail trait
  def wag(): Unit = {println("I'm wagging my tail")}
  def stop_wagging(): Unit = {println("my tail is stilled")}

  // Legs trait
  def move(): Unit = {println("trotting")}
  def stand(): Unit = {println("standing still")}

  // Voice trait
  def speak(): String = "moo"
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org7dfa6f9" class="outline-3"&gt;
&lt;h3 id="org7dfa6f9"&gt;Create a Cow&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org7dfa6f9"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;val cow = new Cow()
cow.wag
cow.move
cow.stop_wagging
cow.stand
println(cow.speak)
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
I'm wagging my tail
trotting
my tail is stilled
standing still
moo

&lt;/pre&gt;

&lt;p&gt;
One thing to note here is that I had a misspelling in that previous code block and ob-ipython failed to execute the block but didn't tell me what the error was. Luckily if you open the REPL you can start poking around (it opens an ammonite REPL) and maybe figure out what's failing.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgde84147" class="outline-2"&gt;
&lt;h2 id="orgde84147"&gt;End&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgde84147"&gt;
&lt;p&gt;
So that's traits. There's a lot more to them, I'm sure, but that's enoug for now.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>hello scala</category><category>scala</category><category>traits</category><guid>https://necromuralist.github.io/Functional-Scala/posts/hello-scala/traits-as-interfaces/</guid><pubDate>Mon, 09 Dec 2019 23:22:52 GMT</pubDate></item><item><title>OB-Ipython With Scala (a test)</title><link>https://necromuralist.github.io/Functional-Scala/posts/exploring/ob-ipython-with-scala-a-test/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Functional-Scala/posts/exploring/ob-ipython-with-scala-a-test/#org4f0e613"&gt;Beginning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Functional-Scala/posts/exploring/ob-ipython-with-scala-a-test/#org1e0ad97"&gt;Middle&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Functional-Scala/posts/exploring/ob-ipython-with-scala-a-test/#org53627f3"&gt;The Traditional Ipython Block&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Functional-Scala/posts/exploring/ob-ipython-with-scala-a-test/#org59868a6"&gt;The Jupyter Block&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Functional-Scala/posts/exploring/ob-ipython-with-scala-a-test/#orgbeae471"&gt;End&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org4f0e613" class="outline-2"&gt;
&lt;h2 id="org4f0e613"&gt;Beginning&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org4f0e613"&gt;
&lt;p&gt;
This is a test of using &lt;a href="https://github.com/gregsexton/ob-ipython"&gt;ob-ipython&lt;/a&gt; with the scala kernel (provided by &lt;a href="https://almond.sh/"&gt;Almond&lt;/a&gt;, so that has to be installed first).
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org1e0ad97" class="outline-2"&gt;
&lt;h2 id="org1e0ad97"&gt;Middle&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org1e0ad97"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org53627f3" class="outline-3"&gt;
&lt;h3 id="org53627f3"&gt;The Traditional Ipython Block&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org53627f3"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;println("testing")
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
testing

&lt;/pre&gt;

&lt;p&gt;
Surprisingly, that worked (although it's very slow).
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org59868a6" class="outline-3"&gt;
&lt;h3 id="org59868a6"&gt;The Jupyter Block&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org59868a6"&gt;
&lt;p&gt;
According to the documentation for &lt;code&gt;ob-ipython&lt;/code&gt; it's being transitioned over to using &lt;code&gt;jupyter&lt;/code&gt; instead of &lt;code&gt;ipython&lt;/code&gt; so there's a new type of source-block to use.
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;val x = 5
println(s"x is $x")
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
x is 5

&lt;/pre&gt;

&lt;p&gt;
This produces the error &lt;code&gt;No org-babel-execute function for jupyter-scala!&lt;/code&gt; unless you remove &lt;code&gt;(jupyter . t)&lt;/code&gt; from the org-babel setup block in &lt;code&gt;init.el&lt;/code&gt;. It looks like it won't co-exist with &lt;a href="https://github.com/dzop/emacs-jupyter"&gt;emacs-jupyter&lt;/a&gt; I'll have to decide if that project has improved enough to start using it again. I just noticed that ob-ipython hasn't been updated in a couple of years, so this "experimental" support might never be more than that. Still, it's good to know that it works.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgbeae471" class="outline-2"&gt;
&lt;h2 id="orgbeae471"&gt;End&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgbeae471"&gt;
&lt;p&gt;
Not very exciting, in what it does (other than work). I'll stick with ob-ipython for now and see if &lt;code&gt;emacs-jupyter&lt;/code&gt; works as well - in my previous experiment with it it didn't seem to be quite ready.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>ob-ipython</category><category>scala</category><category>setup</category><guid>https://necromuralist.github.io/Functional-Scala/posts/exploring/ob-ipython-with-scala-a-test/</guid><pubDate>Mon, 09 Dec 2019 20:51:18 GMT</pubDate></item></channel></rss>