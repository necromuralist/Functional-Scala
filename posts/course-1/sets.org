#+BEGIN_COMMENT
.. title: Sets
.. slug: sets
.. date: 2019-12-14 18:10:15 UTC-08:00
.. tags: sets,scala
.. category: Scala
.. link: 
.. description: Sets in Scala.
.. type: text

#+END_COMMENT
#+OPTIONS: ^:{}
#+TOC: headlines 3
In this assignment, you will work with a functional representation of sets based on the mathematical notion of [[https://www.wikiwand.com/en/Characteristic_function][characteristic functions]]. The goal is to gain practice with higher-order functions.

* Representation

We will work with sets of integers.

As an example to motivate our representation, how would you represent the set of all negative integers? You cannot list them all… one way would be to say: if you give me an integer, I can tell you whether it’s in the set or not: for 3, I say ‘no’; for -1, I say yes.

Mathematically, we call the function which takes an integer as argument and which returns a boolean indicating whether the given integer belongs to a set, the /characteristic function/ of the set. For example, we can characterize the set of negative integers by the characteristic function =(x: Int) => x < 0=.

Therefore, we choose to represent a set by its characteristic function and define a type alias for this representation:

#+begin_src scala
type FunSet = Int => Boolean
#+end_src

Using this representation, we define a function that tests for the presence of a value in a set:

#+begin_src scala
def contains(s: FunSet, elem: Int): Boolean = s(elem)
#+end_src

This takes a =FunSet= method and checks if the element is in the set it represents.
** Basic Functions on Sets

Let’s start by implementing basic functions on sets. Define a function which creates a singleton set from one integer value: the set represents the set of the one given element. Its signature is as follows:

#+begin_src scala
def singletonSet(elem: Int): FunSet = {
  Set(elem)
}
#+end_src

This is not a straight-forward method. Although it looks like we're returning a =Set=, we're actually returning a =FunSet=, so the object being returned won't have any set methods (other than the ability to check that an element is a member of it as in the =contains= method above).

Now that we have a way to create singleton sets, we want to define a function that allow us to build bigger sets from smaller ones.

** Define the functions union, intersect, and diff, which takes two sets, and return, respectively, their union, intersection and differences. diff(s, t) returns a set which contains all the elements of the set s that are not in the set t. These functions have the following signatures:

*** Union
    This took me a while to figure out, but what you're returning here is a =FunSet= which is a function that takes an integer and returns a boolean, so you aren't actually returning a union of the sets, but a function which tells you whether an element is in the union of the two sets.

#+begin_src scala
/**
  ,* Returns a function that decides if an element is in 
  ,*  the either of the given sets (is it in `s`, or `t` or both)
  ,* 
  ,* @param s a function that decides if an integer is in its set
  ,* @param t a function that decides if an integer is in its set
  ,* @returns a function that decides if an integer is in a union of s and t
  ,*/
def union(s: FunSet, t: FunSet): FunSet =
  (element: Int) => s(element) || t(element)
#+end_src

So to use this you would pass it two =FunSet= objects and then use the returned object to check if it has elements in it.

#+begin_src scala
val set_1 = singletonSet(1)
val set_2 = singletonSet(2)
val unionized = union(set_1, set_2)
assert(contains(unionized, 1))
assert(contains(unionized, 2))
#+end_src

*** Intersect
    This uses the same trick as the =union= method - we just need to change the logical operations.

#+begin_src scala
def intersect(s: FunSet, t: FunSet): FunSet =
  (element: Int) => s(element) && t(element)
#+end_src

In this case we want to create a method that checks that both set =s= and set =t= have the element passed to it.

*** Difference
    With sets, the =diff= method tells us if an element is in the first set but not in the second.

#+begin_src scala
def diff(s: FunSet, t: FunSet): FunSet =
  (element: Int) => s(element) && !t(element)
#+end_src

*** Filter
#+begin_quote
Define the function filter which selects only the elements of a set that are accepted by a given predicate p. The filtered elements are returned as a new set.
#+end_quote

Once again, despite the way the problem is stated, we aren't returning a set of elements but a function that checks that an element is both in the set and returns =true= when passed to the function that's given.

#+begin_src scala
def filter(s: FunSet, p: Int => Boolean): FunSet =
  (element: Int) => s(element) && p(element)
#+end_src

** Queries and Transformations on Sets
*** For All
In this part, we are interested in functions used to make requests on elements of a set. The first function tests whether a given predicate is true for all elements of the set. This forall function has the following signature:

#+begin_src scala
def forall(s: FunSet, p: Int => Boolean): Boolean
#+end_src

Note that there is no direct way to find which elements are in a set. =contains= only allows us to know whether a given element is included. Thus, if we wish to do something to all elements of a set, then we have to iterate over all integers, testing each time whether it is included in the set, and if so, to do something with it. Here, we consider that an integer x has the property -1000 <= x <= 1000 in order to limit the search space.

**** Base Case
    Implement forall using linear recursion. For this, use a helper function nested in =forall=. In the implementation there is a variable named =bound= which holds the absolute value for the bounds. Our stopping condition is when we've reached the end of the boundary. Since we need for the method =p= to return true for all elements in =s=, if we reach the end then we know that it passed all the elements so our base returns =true=:

#+begin_src scala
if(a > bound) true
#+end_src

I'm using =>= because the call to the inner function is going to increment =a= by one, so the stopping point is one past the bound.

**** Failing Case
     Since all the elements in =s= have to return true when passed to =p=, if any element returns false then we can stop and report that the set doesn't pass.

#+begin_src scala
else if (s(a) && !p(a)) false
#+end_src

**** The Recursive Call
     Our final case is when =a= is still in bounds and passes =p=, so we need to make the recursive call with the next integer.

#+begin_src scala
else iter(a + 1)
#+end_src

**** Calling Iter
     Since our range of integers is from =-bound= to =bound=, we kick the whole thing off by calling the =iter= method with =-bound=.

#+begin_src scala
iter(-bound)
#+end_src

**** The Whole Shebang
     Here's the method all together.

#+begin_src scala
def forall(s: FunSet, p: Int => Boolean): Boolean = {
  def iter(a: Int): Boolean = {
    if (a > bound) true
    else if (s(a) && !p(a)) false
    else iter(a + 1)
  }
  iter(-bound)
}
#+end_src

*** Exists
#+begin_quote
Using =forall=, implement a function exists which tests whether a set contains at least one element for which the given predicate is true. Note that the functions forall and exists behave like the universal and existential quantifiers of first-order logic.
#+end_quote

Although the instructions say to use =forall= I couldn't see an obvious way to do it so I took the statement to mean "Using =forall= as inspiration" implement =exists=.

**** The Base Case
     In this case, our method will quit as soon as any element passes so if we reach the end that means that none of them did so we need to return false.

#+begin_src scala
if (a > bound) false
#+end_src

**** The Short-Circuit
     As soon as an element is in =s= and passes =p= we can return true.

#+begin_src scala
else if (s(a) && p(a)) true
#+end_src

The rest of the method looks the same as =forall=.
**** The Whole Thing
#+begin_src scala
def exists(s: FunSet, p: Int => Boolean): Boolean = {
  def iter(a: int): Boolean = {
    if (a > bound) false
    else if (s(a) && p(a)) true
    else iter(a + 1)
  }
  iter(-bound)
}
#+end_src

*** Map
#+begin_quote
Finally, using forall or exists, write a function map which transforms a given set into another one by applying to each of its elements the given function. map has the following signature:
#+end_quote

Once again, rather than re-using the previous methods exactly I'm going to use their spirit. This time I'll use the accumulator pattern to turn the inner function to a tail-recursive one.

#+begin_src scala
def iter(a: Int, accumulator: Set[Int]): Set[Int]
#+end_src
**** Base Case
     Since we have an =accumulator= that holds the set of mapped values, when we reach the end we just return it.

#+begin_src scala
if (a > bound) accumulator
#+end_src
**** Updating the Accumulator
     If the next element is in =s= we need to add the mapped value for the element to the accumulator and make the next recursive call. Alternatively you could just update the accumulator, but then you'd have an extra variable.

#+begin_src scala
else if (s(a)) iter(a + 1, accumulator + f(a))
#+end_src
**** The Recursive Call
     This is like the other methods except we have to pass the accumulator.

#+begin_src scala
else iter(a + 1, accumulator)
#+end_src

**** Calling the Inner Function
     To initialize the accumulator, I pass in an empty set of type integer (by creating a set with an integer and then empyting it).

#+begin_src scala
iter(-bound, Set(0).empty)
#+end_src

#+begin_src scala
def map(s: FunSet, f: Int => Int): FunSet
#+end_src

Extra Hints

    Be attentive in the video lectures on how to write anonymous functions in Scala.
    Sets are represented as functions. Think about what it means for an element to belong to a set, in terms of function evaluation. For example, how do you represent a set that contains all numbers between 1 and 100?
    Most of the solutions for this assignment can be written as one-liners. If you have more, you probably need to rethink your solution. In other words, this assignment needs more thinking (whiteboard, pen and paper) than coding ;-).
    If you are having some trouble with terminology, have a look at the [[https://docs.scala-lang.org/glossary/][glossary]].


