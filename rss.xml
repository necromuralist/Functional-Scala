<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Functional Scala</title><link>https://necromuralist.github.io/Functional-Scala/</link><description>Learning Functional Programming With Scala</description><atom:link href="https://necromuralist.github.io/Functional-Scala/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2019 &lt;a href="mailto:necromuralist@protonmail.com"&gt;Cloistered Monkey&lt;/a&gt; </copyright><lastBuildDate>Wed, 18 Dec 2019 21:44:21 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Anagrams</title><link>https://necromuralist.github.io/Functional-Scala/posts/course-1/anagrams/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;p&gt;
In this assignment, you will solve the combinatorial problem of finding all the anagrams of a sentence using the Scala Collections API and for-comprehensions.
&lt;/p&gt;

&lt;p&gt;
You are encouraged to look at the Scala API documentation while solving this exercise, which can be found here:
&lt;/p&gt;

&lt;p&gt;
&lt;a href="http://www.scala-lang.org/api/current/index.html"&gt;http://www.scala-lang.org/api/current/index.html&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
Note that Scala uses the `String` from Java, therefore the documentation for strings has to be looked up in the Javadoc API:
&lt;/p&gt;

&lt;p&gt;
&lt;a href="http://docs.oracle.com/javase/8/docs/api/java/lang/String.html"&gt;http://docs.oracle.com/javase/8/docs/api/java/lang/String.html&lt;/a&gt;
The problem
&lt;/p&gt;

&lt;p&gt;
An anagram of a word is a rearrangement of its letters such that a word with a different meaning is formed. For example, if we rearrange the letters of the word `Elvis` we can obtain the word `lives`, which is one of its anagrams.
&lt;/p&gt;

&lt;p&gt;
In a similar way, an anagram of a sentence is a rearrangement of all the characters in the sentence such that a new sentence is formed. The new sentence consists of meaningful words, the number of which may or may not correspond to the number of words in the original sentence. For example, the sentence:
&lt;/p&gt;

&lt;pre class="example"&gt;
I love you
&lt;/pre&gt;

&lt;p&gt;
is an anagram of the sentence:
&lt;/p&gt;
&lt;pre class="example"&gt;
You olive
&lt;/pre&gt;

&lt;p&gt;
In this exercise, we will consider permutations of words anagrams of the sentence. In the above example:
&lt;/p&gt;

&lt;pre class="example"&gt;
You I love
&lt;/pre&gt;

&lt;p&gt;
is considered a separate anagram.
&lt;/p&gt;

&lt;p&gt;
When producing anagrams, we will ignore character casing and punctuation characters.
&lt;/p&gt;

&lt;p&gt;
Your ultimate goal is to implement a method `sentenceAnagrams`, which, given a list of words representing a sentence, finds all the anagrams of that sentence. Note that we used the term meaningful in defining what anagrams are. You will be given a dictionary, i.e. a list of words indicating words that have a meaning.
&lt;/p&gt;

&lt;p&gt;
Here is the general idea. We will transform the characters of the sentence into a list saying how often each character appears. We will call this list the occurrence list. To find anagrams of a word we will find all the words from the dictionary which have the same occurrence list. Finding an anagram of a sentence is slightly more difficult. We will transform the sentence into its occurrence list, then try to extract any subset of characters from it to see if we can form any meaningful words. From the remaining characters we will solve the problem recursively and then combine all the meaningful words we have found with the recursive solution.
&lt;/p&gt;

&lt;p&gt;
Let's apply this idea to our example, the sentence `You olive`. Lets represent this sentence as an occurrence list of characters `eiloouvy`. We start by subtracting some subset of the characters, say `i`. We are left with the characters `eloouvy`.
&lt;/p&gt;

&lt;p&gt;
Looking into the dictionary we see that `i` corresponds to word `I` in the English language, so we found one meaningful word. We now solve the problem recursively for the rest of the characters `eloouvy` and obtain a list of solutions `List(List(love, you), List(you, love))`. We can combine`I` with that list to obtain sentences `I love you` and `I you love`, which are both valid anagrams.
Representation
&lt;/p&gt;

&lt;p&gt;
We represent the words of a sentence with the `String` data type:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;type Word = String
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Words contain lowercase and uppercase characters, and no whitespace, punctuation or other special characters.
&lt;/p&gt;

&lt;p&gt;
Since we are ignoring the punctuation characters of the sentence as well as the whitespace characters, we will represent sentences as lists of words:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;type Sentence = List[Word]
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
We mentioned previously that we will transform words and sentences into occurrence lists. We represent the occurrence lists as sorted lists of character and integers pairs:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;type Occurrences = List[(Char, Int)]
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
The list should be sorted by the characters in an ascending order. Since we ignore the character casing, all the characters in the occurrence list have to be lowercase. The integer in each pair denotes how often the character appears in a particular word or a sentence. This integer must be positive. Note that positive also means non-zero – characters that do not appear in the sentence do not appear in the occurrence list either.
&lt;/p&gt;

&lt;p&gt;
Finally, the dictionary of all the meaningful English words is represented as a `List` of words:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;val dictionary: List[Word] = loadDictionary
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
The dictionary already exists for this exercise and is loaded for you using the `loadDictionary` utility method.
Computing Occurrence Lists
&lt;/p&gt;

&lt;p&gt;
The `groupBy` method takes a function mapping an element of a collection to a key of some other type, and produces a `Map` of keys and collections of elements which mapped to the same key. This method groups the elements, hence its name.
&lt;/p&gt;

&lt;p&gt;
Here is one example:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;List("Every", "student", "likes", "Scala").groupBy((element: String) =&amp;gt; element.length)
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
produces:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Map(
  5 -&amp;gt; List("Every", "likes", "Scala"),
  7 -&amp;gt; List("student")
)
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Above, the key is the `length` of the string and the type of the key is `Int`. Every `String` with the same `length` is grouped under the same key – its `length`.
&lt;/p&gt;

&lt;p&gt;
Here is another example:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;List(0, 1, 2, 1, 0).groupBy((element: Int) =&amp;gt; element)
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
produces:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Map(
  0 -&amp;gt; List(0, 0),
  1 -&amp;gt; List(1, 1),
  2 -&amp;gt; List(2)
)
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
`Map`s provide efficient lookup of all the values mapped to a certain key. Any collection of pairs can be transformed into a `Map` using the `toMap` method. Similarly, any `Map` can be transformed into a `List` of pairs using the `toList` method.
&lt;/p&gt;

&lt;p&gt;
In our case, the collection will be a `Word` (i.e. a `String`) and its elements are characters, so the `groupBy` method takes a function mapping characters into a desired key type.
&lt;/p&gt;

&lt;p&gt;
In the first part of this exercise, we will implement the method `wordOccurrences` which, given a word, produces its occurrence list. In one of the previous exercises, we produced the occurrence list by recursively traversing a list of characters.
&lt;/p&gt;

&lt;p&gt;
This time we will use the `groupBy` method from the Collections API (hint: you may additionally use other methods, such as `map` and `toList`).
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def wordOccurrences(w: Word): Occurrences
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Next, we implement another version of the method for entire sentences. We can concatenate the words of the sentence into a single word and then reuse the method `wordOccurrences` that we already have.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def sentenceOccurrences(s: Sentence): Occurrences
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Computing Anagrams of a Word
&lt;/p&gt;

&lt;p&gt;
To compute the anagrams of a word, we use the simple observation that all the anagrams of a word have the same occurrence list. To allow efficient lookup of all the words with the same occurrence list, we will have to group the words of the dictionary according to their occurrence lists.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;lazy val dictionaryByOccurrences: Map[Occurrences, List[Word]]
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
We then implement the method `wordAnagrams` which returns the list of anagrams of a single word:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def wordAnagrams(word: Word): List[Word]
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Computing Subsets of a Set
&lt;/p&gt;

&lt;p&gt;
To compute all the anagrams of a sentence, we will need a helper method which, given an occurrence list, produces all the subsets of that occurrence list.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def combinations(occurrences: Occurrences): List[Occurrences]
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
The `combinations` method should return all possible ways in which we can pick a subset of characters from `occurrences`. For example, given the occurrence list:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;List(('a', 2), ('b', 2))
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
the list of all subsets is:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;List(
  List(),
  List(('a', 1)),
  List(('a', 2)),
  List(('b', 1)),
  List(('a', 1), ('b', 1)),
  List(('a', 2), ('b', 1)),
  List(('b', 2)),
  List(('a', 1), ('b', 2)),
  List(('a', 2), ('b', 2))
)
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
The order in which you return the subsets does not matter as long as they are all included. Note that there is only one subset of an empty occurrence list, and that is the empty occurrence list itself.
&lt;/p&gt;

&lt;p&gt;
Hint: investigate how you can use for-comprehensions to implement parts of this method.
Computing Anagrams of a Sentence
&lt;/p&gt;

&lt;p&gt;
We now implement another helper method called `subtract` which, given two occurrence lists `x` and `y`, subtracts the frequencies of the occurrence list `y` from the frequencies of the occurrence list `x`:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def subtract(x: Occurrences, y: Occurrences): Occurrences
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
For example, given two occurrence lists for words `lard` and `r`:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;val x = List(('a', 1), ('d', 1), ('l', 1), ('r', 1))
val y = List(('r', 1))
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
the `subtract(x, y)` is `List(('a', 1), ('d', 1), ('l', 1))`.
&lt;/p&gt;

&lt;p&gt;
The precondition for the `subtract` method is that the occurrence list `y` is a subset of the occurrence list `x` – if the list `y` has some character then the frequency of that character in `x` must be greater or equal than the frequency of that character in `y`.
&lt;/p&gt;

&lt;p&gt;
When implementing `subtract` you can assume that `y` is a subset of `x`.
&lt;/p&gt;

&lt;p&gt;
Hint: you can use `foldLeft`, and `-`, `apply` and `updated` operations on `Map`.
&lt;/p&gt;

&lt;p&gt;
Now we can finally implement our `sentenceAnagrams` method for sequences.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def sentenceAnagrams(sentence: Sentence): List[Sentence]
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Note that the anagram of the empty sentence is the empty sentence itself.
&lt;/p&gt;

&lt;p&gt;
Hint: First of all, think about the recursive structure of the problem: what is the base case, and how should the result of a recursive invocation be integrated in each iteration? Also, using for-comprehensions helps in finding an elegant implementation for this method.
&lt;/p&gt;

&lt;p&gt;
Test the `sentenceAnagrams` method on short sentences, no more than 10 characters. The combinations space gets huge very quickly as your sentence gets longer, so the program may run for a very long time. However for sentences such as `Linux rulez`, `I love you` or `Mickey Mouse` the program should end fairly quickly – there are not many other ways to say these things.
Further Improvement (Optional)
&lt;/p&gt;

&lt;p&gt;
This part is optional and is not part of an assignment, nor will be graded. You may skip this part freely.
&lt;/p&gt;

&lt;p&gt;
The solution with enlisting all the combinations was concise, but it was not very efficient. The problem is that we have recomputed some anagrams more than once when recursively solving the problem. Think about a concrete example and a situation where you compute the anagrams of the same subset of an occurrence list multiple times.
&lt;/p&gt;

&lt;p&gt;
One way to improve the performance is to save the results obtained the first time when you compute the anagrams for an occurence list, and use the stored result if you need the same result a second time. Try to write a new method `sentenceAnagramsMemo` which does this.
&lt;/p&gt;</description><guid>https://necromuralist.github.io/Functional-Scala/posts/course-1/anagrams/</guid><pubDate>Wed, 18 Dec 2019 05:02:28 GMT</pubDate></item><item><title>Huffman Coding</title><link>https://necromuralist.github.io/Functional-Scala/posts/course-1/huffman-coding/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;p&gt;
Huffman coding is a compression algorithm that can be used to compress lists of characters.
&lt;/p&gt;

&lt;p&gt;
In a normal, uncompressed text, each character is represented by the same number of bits (usually eight). In Huffman coding, each character can have a bit representation of a different length, depending on how common a character is: the characters that appear often in a text are represented by a shorter bit sequence than those being used more rarely. Every huffman code defines the specific bit sequences used to represent each character.
&lt;/p&gt;

&lt;p&gt;
A Huffman code can be represented by a binary tree whose leaves represent the characters that should be encoded. The code tree below can represent the characters A to H.
&lt;/p&gt;


&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="https://necromuralist.github.io/Functional-Scala/posts/course-1/huffman-coding/huffman-table.png" alt="huffman-table.png"&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
The leaf nodes have associated with them a weight which denotes the frequency of appearance of that character. In the example below, the character A has the highest weight 8, while F for example has weight 1.
&lt;/p&gt;

&lt;p&gt;
Every branching node of the code tree can be thought of as a set containing the characters present in the leaves below it. The weight of a branching node is the total weight of the leaves below it: this information is necessary for the construction of the tree.
&lt;/p&gt;

&lt;p&gt;
Note that a given encoding is only optimal if the character frequencies in the encoded text match the weights in the code tree.
&lt;/p&gt;

&lt;p&gt;
Finally, observe the recursive structure of the coding tree: every sub-tree is itself a valid code tree for a smaller alphabet.
Encoding
&lt;/p&gt;

&lt;p&gt;
For a given Huffman tree, one can obtain the encoded representation of a character by traversing from the root of the tree to the leaf containing the character. Along the way, when a left branch is chosen, a 0 is added to the representation, and when a right branch is chosen, 1 is added to the representation. Thus, for the Huffman tree above, the character D is encoded as 1011.
Decoding
&lt;/p&gt;

&lt;p&gt;
Decoding also starts at the root of the tree. Given a sequence of bits to decode, we successively read the bits, and for each 0, we choose the left branch, and for each 1 we choose the right branch. When we reach a leaf, we decode the corresponding character and then start again at the root of the tree. As an example, given the Huffman tree above, the sequence of bits,10001010 corresponds to BAC.
Implementation
&lt;/p&gt;

&lt;p&gt;
In Scala, a Huffman tree can be represented as follows:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;abstract class CodeTree
case class Fork (left: CodeTree, right: CodeTree, chars: List[Char], weight: Int) extends CodeTree
case class Leaf(char: Char, weight: Int) extends CodeTree
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
To begin, implement the following two (hint: very simple) functions using pattern matches on the code tree:
&lt;/p&gt;

&lt;p&gt;
weight which returns the total weight of a given Huffman tree.def weight(tree: CodeTree): Int = tree match …
chars which returns the list of characters defined in a given Huffman tree.def chars(tree: CodeTree): List[Char] = tree match …
&lt;/p&gt;

&lt;p&gt;
Using these functions, it’s possible to define makeCodeTree, a function which facilitates the creation of Huffman trees by automatically calculating the list of characters and the weight when creating a node. This function is already implemented in the handout template:
&lt;/p&gt;

&lt;p&gt;
Using makeCodeTree, code trees can be constructed manually in the following way:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;val sampleTree = makeCodeTree(
  makeCodeTree(Leaf('x', 1), Leaf('e', 1)),
  Leaf('t', 2)
)
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Constructing Huffman Trees
&lt;/p&gt;

&lt;p&gt;
Given a text, it’s possible to calculate and build an optimal Huffman tree in the sense that the encoding of that text will be of the minimum possible length, meanwhile keeping all information (i.e., it is lossless).
&lt;/p&gt;

&lt;p&gt;
To obtain an optimal tree from a list of characters, you have to define a function createCodeTree with the following signature:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def createCodeTree(chars: List[Char]): CodeTree = ...
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Proceed with the following steps to break up this assignment into smaller parts (the handout template contains more detailed documentation):
&lt;/p&gt;

&lt;p&gt;
Begin by writing a function times which calculates the frequency of each character in the text: def times(chars: List[Char]): List[(Char, Int)] = …
Then, write a function makeOrderedLeafList which generates a list containing all the leaves of the Huffman tree to be constructed (the case Leaf of the algebraic datatype CodeTree). The list should be ordered by ascending weights where the weight of a leaf is the number of times (or the frequency) it appears in the given text: def makeOrderedLeafList(freqs: List[(Char, Int)]): List[Leaf] = …
Write a simple function singleton which checks whether a list of code trees contains only one single tree. def singleton(trees: List[CodeTree]): Boolean = …
Write a function combine which (1) removes the two trees with the lowest weight from the list constructed in the previous step, and (2) merges them by creating a new node of type Fork. Add this new tree to the list - which is now one element shorter - while preserving the order (by weight). def combine(trees: List[CodeTree]): List[CodeTree] = …
Write a function until which calls the two functions defined above until this list contains only a single tree. This tree is the optimal coding tree. The function until can be used in the following way: until(singleton, combine)(trees) where the argument trees is of the type List[CodeTree].
Finally, use the functions defined above to implement the function createCodeTree which respects the signature shown above.
&lt;/p&gt;

&lt;p&gt;
Decoding
&lt;/p&gt;

&lt;p&gt;
Define the function decode which decodes a list of bits (which were already encoded using a Huffman tree), given the corresponding coding tree.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;type Bit = Int
def decode(tree: CodeTree, bits: List[Bit]): List[Char] = ...
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Use this function and the frenchCode code tree to decode the bit sequence in secret. Store the resulting character sequence in decodedSecret.
Encoding
&lt;/p&gt;

&lt;p&gt;
This section deals with the Huffman encoding of a sequence of characters into a sequence of bits.
…Using a Huffman Tree
&lt;/p&gt;

&lt;p&gt;
Define the function encode which encodes a list of characters using Huffman coding, given a code tree.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def encode(tree: CodeTree)(text: List[Char]): List[Bit] = ...
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Your implementation must traverse the coding tree for each character, a task that should be done using a helper function.
…Using a Coding Table
&lt;/p&gt;

&lt;p&gt;
The previous function is simple, but very inefficient. You goal is now to define quickEncode which encodes an equivalent representation, but more efficiently.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def quickEncode(tree: CodeTree)(text: List[Char]): List[Bit] = ...
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Your implementation will build a coding table once which, for each possible character, gives the list of bits of its code. The simplest way - but not the most efficient - is to encode the table of characters as a list of pairs.
&lt;/p&gt;

&lt;p&gt;
The encoding must then be done by accessing the table, via a functioncodeBits.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def codeBits(table: CodeTable)(char: Char): List[Bit] = ...
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
The creation of the table is defined by convert which traverses the coding tree and constructs the character table.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def convert(t: CodeTree): CodeTable = ...
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Implement the function convert by using the function mergeCodeTablesbelow:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def mergeCodeTables(a: CodeTable, b: CodeTable): CodeTable = ...
&lt;/pre&gt;&lt;/div&gt;</description><guid>https://necromuralist.github.io/Functional-Scala/posts/course-1/huffman-coding/</guid><pubDate>Wed, 18 Dec 2019 04:55:16 GMT</pubDate></item><item><title>Object-Oriented Sets</title><link>https://necromuralist.github.io/Functional-Scala/posts/course-1/object-oriented-sets/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;p&gt;
In this assignment you will work with an object-oriented representations based on binary trees.
Object-Oriented Sets
&lt;/p&gt;

&lt;p&gt;
For this part, you will earn credit by completing the TweetSet.scala file. This file defines an abstract class TweetSet with two concrete subclasses,Empty which represents an empty set, and NonEmpty(elem: Tweet, left: TweetSet, right: TweetSet), which represents a non-empty set as a binary tree rooted at elem. The tweets are indexed by their text bodies: the bodies of all tweets on the left are lexicographically smaller than elem and all bodies of elements on the right are lexicographically greater.
&lt;/p&gt;

&lt;p&gt;
Note also that these classes are immutable: the set-theoretic operations do not modify this but should return a new set.
&lt;/p&gt;

&lt;p&gt;
Before tackling this assignment, we suggest you first study the already implemented methods contains and incl for inspiration.
1 Filtering
&lt;/p&gt;

&lt;p&gt;
Implement filtering on tweet sets. Complete the stubs for the methods filter and filterAcc. filter takes as argument a function, the predicate, which takes a tweet and returns a boolean. filter then returns the subset of all the tweets in the original set for which the predicate is true. For example, the following call:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;tweets.filter(tweet =&amp;gt; tweet.retweets &amp;gt; 10)
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
applied to a set tweets of two tweets, say, where the first tweet was not retweeted and the second tweet was retweeted 20 times should return a set containing only the second tweet.
&lt;/p&gt;

&lt;p&gt;
Hint: start by defining the helper method filterAcc which takes an accumulator set as a second argument. This accumulator contains the ongoing result of the filtering.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/** This method takes a predicate and returns a subset of all the elements
 *  in the original set for which the predicate is true.
 */
def filter(p: Tweet =&amp;gt; Boolean): TweetSet
def filterAcc(p: Tweet =&amp;gt; Boolean, acc: TweetSet): TweetSet
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
The definition of filter in terms of filterAcc should then be straightforward.
2 Taking Unions
&lt;/p&gt;

&lt;p&gt;
Implement union on tweet sets. Complete the stub for the method union. The method union takes another set that, and computes a new set which is the union of this and that, i.e. a set that contains exactly the elements that are either in this or in that, or in both.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def union(that: TweetSet): TweetSet
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Note that in this exercise it is your task to find out in which class(es) to define the union method (should it be abstract in class TweetSet?).
&lt;/p&gt;

&lt;p&gt;
Warning : This method is a crucial part of the assignment. There are many ways to correctly code it, however some implementations run in an exponential time, so be careful, an inefficient implementation might result in a timeout during the grading process.
3 Sorting Tweets by Their Influence
&lt;/p&gt;

&lt;p&gt;
The more often a tweet is “re-tweeted” (that is, repeated by a different user with or without additions), the more influential it is.
&lt;/p&gt;

&lt;p&gt;
The goal of this part of the exercise is to add a method descendingByRetweet to TweetSet which should produce a linear sequence of tweets (as an instance of class TweetList), ordered by their number of retweets:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def descendingByRetweet: TweetList
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
This method reflects a common pattern when transforming data structures. While traversing one data structure (in this case, a TweetSet), we’re building a second data structure (here, an instance of class TweetList). The idea is to start with the empty list Nil (containing no tweets), and to find the tweet with the most retweets in the input TweetSet. This tweet is removed from the TweetSet (that is, we obtain a new TweetSet that has all the tweets of the original set except for the tweet that was “removed”; this immutable set operation, remove, is already implemented for you), and added to the result list by creating a new Cons. After that, the process repeats itself, but now we are searching through a TweetSet with one less tweet.
&lt;/p&gt;

&lt;p&gt;
Hint: start by implementing the method mostRetweeted which returns the most popular tweet of a TweetSet.
4 Tying everything together
&lt;/p&gt;

&lt;p&gt;
In the last step of this assignment your task is to detect influential tweets in a set of recent tweets. We are providing you with a TweetSet containing several hundred tweets from popular tech news sites in the past few days, located in the TweetReader object (file “TweetReader.scala”).TweetReader.allTweets returns an instance of TweetSet containing a set of all available tweets.
&lt;/p&gt;

&lt;p&gt;
Furthermore, you are given two lists of keywords. The first list corresponds to keywords associated with Google and Android smartphones, while the second list corresponds to keywords associated with Apple and iOS devices. Your objective is to detect which platform has generated more interest or activity in the past few days.
&lt;/p&gt;

&lt;p&gt;
As a first step, use the functionality you implemented in the first parts of this assignment to create two different TweetSets, googleTweets andappleTweets. The first TweetSet, googleTweets, should contain all tweets that mention (in their “text”) one of the keywords in the google list. The second TweetSet, appleTweets, should contain all tweets that mention one of the keyword in the apple list. Their signature is as follows:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;lazy val googleTweets: TweetSet
lazy val appleTweets: TweetSet
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Hint: use the exists method of List and contains method of classjava.lang.String.
&lt;/p&gt;

&lt;p&gt;
From the union of those two TweetSets, produce trending, an instance of class TweetList representing a sequence of tweets ordered by their number of retweets:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;lazy val trending: TweetList
&lt;/pre&gt;&lt;/div&gt;</description><guid>https://necromuralist.github.io/Functional-Scala/posts/course-1/object-oriented-sets/</guid><pubDate>Wed, 18 Dec 2019 04:47:53 GMT</pubDate></item><item><title>Sets</title><link>https://necromuralist.github.io/Functional-Scala/posts/course-1/sets/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Functional-Scala/posts/course-1/sets/#org02f6241"&gt;Representation&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Functional-Scala/posts/course-1/sets/#orgd8fd47e"&gt;Basic Functions on Sets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Functional-Scala/posts/course-1/sets/#org850a3b1"&gt;Define the functions union, intersect, and diff, which takes two sets, and return, respectively, their union, intersection and differences. diff(s, t) returns a set which contains all the elements of the set s that are not in the set t. These functions have the following signatures:&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Functional-Scala/posts/course-1/sets/#orgd4f036e"&gt;Union&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Functional-Scala/posts/course-1/sets/#org970a206"&gt;Intersect&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Functional-Scala/posts/course-1/sets/#org2582992"&gt;Difference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Functional-Scala/posts/course-1/sets/#org974fee9"&gt;Filter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Functional-Scala/posts/course-1/sets/#org530f59a"&gt;Queries and Transformations on Sets&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Functional-Scala/posts/course-1/sets/#orgb88e3e0"&gt;For All&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Functional-Scala/posts/course-1/sets/#orgf51e41b"&gt;Exists&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Functional-Scala/posts/course-1/sets/#org3fd82dd"&gt;Map&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
In this assignment, you will work with a functional representation of sets based on the mathematical notion of &lt;a href="https://www.wikiwand.com/en/Characteristic_function"&gt;characteristic functions&lt;/a&gt;. The goal is to gain practice with higher-order functions.
&lt;/p&gt;

&lt;div id="outline-container-org02f6241" class="outline-2"&gt;
&lt;h2 id="org02f6241"&gt;Representation&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org02f6241"&gt;
&lt;p&gt;
We will work with sets of integers.
&lt;/p&gt;

&lt;p&gt;
As an example to motivate our representation, how would you represent the set of all negative integers? You cannot list them all… one way would be to say: if you give me an integer, I can tell you whether it’s in the set or not: for 3, I say ‘no’; for -1, I say yes.
&lt;/p&gt;

&lt;p&gt;
Mathematically, we call the function which takes an integer as argument and which returns a boolean indicating whether the given integer belongs to a set, the &lt;i&gt;characteristic function&lt;/i&gt; of the set. For example, we can characterize the set of negative integers by the characteristic function &lt;code&gt;(x: Int) =&amp;gt; x &amp;lt; 0&lt;/code&gt;.
&lt;/p&gt;

&lt;p&gt;
Therefore, we choose to represent a set by its characteristic function and define a type alias for this representation:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="kt"&gt;FunSet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Int&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Boolean&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Using this representation, we define a function that tests for the presence of a value in a set:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;contains&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;FunSet&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;elem&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Boolean&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;elem&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
This takes a &lt;code&gt;FunSet&lt;/code&gt; method and checks if the element is in the set it represents.
&lt;/p&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgd8fd47e" class="outline-3"&gt;
&lt;h3 id="orgd8fd47e"&gt;Basic Functions on Sets&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgd8fd47e"&gt;
&lt;p&gt;
Let’s start by implementing basic functions on sets. Define a function which creates a singleton set from one integer value: the set represents the set of the one given element. Its signature is as follows:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;singletonSet&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;elem&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;FunSet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="nc"&gt;Set&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;elem&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
This is not a straight-forward method. Although it looks like we're returning a &lt;code&gt;Set&lt;/code&gt;, we're actually returning a &lt;code&gt;FunSet&lt;/code&gt;, so the object being returned won't have any set methods (other than the ability to check that an element is a member of it as in the &lt;code&gt;contains&lt;/code&gt; method above).
&lt;/p&gt;

&lt;p&gt;
Now that we have a way to create singleton sets, we want to define a function that allow us to build bigger sets from smaller ones.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org850a3b1" class="outline-3"&gt;
&lt;h3 id="org850a3b1"&gt;Define the functions union, intersect, and diff, which takes two sets, and return, respectively, their union, intersection and differences. diff(s, t) returns a set which contains all the elements of the set s that are not in the set t. These functions have the following signatures:&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org850a3b1"&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgd4f036e" class="outline-4"&gt;
&lt;h4 id="orgd4f036e"&gt;Union&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgd4f036e"&gt;
&lt;p&gt;
This took me a while to figure out, but what you're returning here is a &lt;code&gt;FunSet&lt;/code&gt; which is a function that takes an integer and returns a boolean, so you aren't actually returning a union of the sets, but a function which tells you whether an element is in the union of the two sets.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt;  * Returns a function that decides if an element is in &lt;/span&gt;
&lt;span class="cm"&gt;  *  the either of the given sets (is it in `s`, or `t` or both)&lt;/span&gt;
&lt;span class="cm"&gt;  * &lt;/span&gt;
&lt;span class="cm"&gt;  * @param s a function that decides if an integer is in its set&lt;/span&gt;
&lt;span class="cm"&gt;  * @param t a function that decides if an integer is in its set&lt;/span&gt;
&lt;span class="cm"&gt;  * @returns a function that decides if an integer is in a union of s and t&lt;/span&gt;
&lt;span class="cm"&gt;  */&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;union&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;FunSet&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;FunSet&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;FunSet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
  &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
So to use this you would pass it two &lt;code&gt;FunSet&lt;/code&gt; objects and then use the returned object to check if it has elements in it.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;set_1&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="n"&gt;singletonSet&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;set_2&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="n"&gt;singletonSet&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;unionized&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="n"&gt;union&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;set_1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;set_2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;assert&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;contains&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unionized&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;assert&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;contains&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unionized&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org970a206" class="outline-4"&gt;
&lt;h4 id="org970a206"&gt;Intersect&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org970a206"&gt;
&lt;p&gt;
This uses the same trick as the &lt;code&gt;union&lt;/code&gt; method - we just need to change the logical operations.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;intersect&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;FunSet&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;FunSet&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;FunSet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
  &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
In this case we want to create a method that checks that both set &lt;code&gt;s&lt;/code&gt; and set &lt;code&gt;t&lt;/code&gt; have the element passed to it.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org2582992" class="outline-4"&gt;
&lt;h4 id="org2582992"&gt;Difference&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org2582992"&gt;
&lt;p&gt;
With sets, the &lt;code&gt;diff&lt;/code&gt; method tells us if an element is in the first set but not in the second.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;diff&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;FunSet&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;FunSet&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;FunSet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
  &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org974fee9" class="outline-4"&gt;
&lt;h4 id="org974fee9"&gt;Filter&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org974fee9"&gt;
&lt;blockquote&gt;
&lt;p&gt;
Define the function filter which selects only the elements of a set that are accepted by a given predicate p. The filtered elements are returned as a new set.
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
Once again, despite the way the problem is stated, we aren't returning a set of elements but a function that checks that an element is both in the set and returns &lt;code&gt;true&lt;/code&gt; when passed to the function that's given.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;FunSet&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Boolean&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;FunSet&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
  &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org530f59a" class="outline-3"&gt;
&lt;h3 id="org530f59a"&gt;Queries and Transformations on Sets&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org530f59a"&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgb88e3e0" class="outline-4"&gt;
&lt;h4 id="orgb88e3e0"&gt;For All&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgb88e3e0"&gt;
&lt;p&gt;
In this part, we are interested in functions used to make requests on elements of a set. The first function tests whether a given predicate is true for all elements of the set. This forall function has the following signature:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;forall&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;FunSet&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Boolean&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Boolean&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Note that there is no direct way to find which elements are in a set. &lt;code&gt;contains&lt;/code&gt; only allows us to know whether a given element is included. Thus, if we wish to do something to all elements of a set, then we have to iterate over all integers, testing each time whether it is included in the set, and if so, to do something with it. Here, we consider that an integer x has the property -1000 &amp;lt;= x &amp;lt;= 1000 in order to limit the search space.
&lt;/p&gt;
&lt;/div&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a id="orgccc570d"&gt;&lt;/a&gt;Base Case&lt;br&gt;
&lt;div class="outline-text-5" id="text-orgccc570d"&gt;
&lt;p&gt;
Implement forall using linear recursion. For this, use a helper function nested in &lt;code&gt;forall&lt;/code&gt;. In the implementation there is a variable named &lt;code&gt;bound&lt;/code&gt; which holds the absolute value for the bounds. Our stopping condition is when we've reached the end of the boundary. Since we need for the method &lt;code&gt;p&lt;/code&gt; to return true for all elements in &lt;code&gt;s&lt;/code&gt;, if we reach the end then we know that it passed all the elements so our base returns &lt;code&gt;true&lt;/code&gt;:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;bound&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
I'm using &lt;code&gt;&amp;gt;&lt;/code&gt; because the call to the inner function is going to increment &lt;code&gt;a&lt;/code&gt; by one, so the stopping point is one past the bound.
&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;

&lt;li&gt;&lt;a id="orgf2fe102"&gt;&lt;/a&gt;Failing Case&lt;br&gt;
&lt;div class="outline-text-5" id="text-orgf2fe102"&gt;
&lt;p&gt;
Since all the elements in &lt;code&gt;s&lt;/code&gt; have to return true when passed to &lt;code&gt;p&lt;/code&gt;, if any element returns false then we can stop and report that the set doesn't pass.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;

&lt;li&gt;&lt;a id="orgded84d4"&gt;&lt;/a&gt;The Recursive Call&lt;br&gt;
&lt;div class="outline-text-5" id="text-orgded84d4"&gt;
&lt;p&gt;
Our final case is when &lt;code&gt;a&lt;/code&gt; is still in bounds and passes &lt;code&gt;p&lt;/code&gt;, so we need to make the recursive call with the next integer.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;iter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;

&lt;li&gt;&lt;a id="org6c09310"&gt;&lt;/a&gt;Calling Iter&lt;br&gt;
&lt;div class="outline-text-5" id="text-org6c09310"&gt;
&lt;p&gt;
Since our range of integers is from &lt;code&gt;-bound&lt;/code&gt; to &lt;code&gt;bound&lt;/code&gt;, we kick the whole thing off by calling the &lt;code&gt;iter&lt;/code&gt; method with &lt;code&gt;-bound&lt;/code&gt;.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;iter&lt;/span&gt;&lt;span class="o"&gt;(-&lt;/span&gt;&lt;span class="n"&gt;bound&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;

&lt;li&gt;&lt;a id="org45dfc12"&gt;&lt;/a&gt;The Whole Shebang&lt;br&gt;
&lt;div class="outline-text-5" id="text-org45dfc12"&gt;
&lt;p&gt;
Here's the method all together.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;forall&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;FunSet&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Boolean&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Boolean&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;iter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Boolean&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;bound&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;iter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="n"&gt;iter&lt;/span&gt;&lt;span class="o"&gt;(-&lt;/span&gt;&lt;span class="n"&gt;bound&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgf51e41b" class="outline-4"&gt;
&lt;h4 id="orgf51e41b"&gt;Exists&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgf51e41b"&gt;
&lt;blockquote&gt;
&lt;p&gt;
Using &lt;code&gt;forall&lt;/code&gt;, implement a function exists which tests whether a set contains at least one element for which the given predicate is true. Note that the functions forall and exists behave like the universal and existential quantifiers of first-order logic.
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
Although the instructions say to use &lt;code&gt;forall&lt;/code&gt; I couldn't see an obvious way to do it so I took the statement to mean "Using &lt;code&gt;forall&lt;/code&gt; as inspiration" implement &lt;code&gt;exists&lt;/code&gt;.
&lt;/p&gt;
&lt;/div&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a id="org9960d0c"&gt;&lt;/a&gt;The Base Case&lt;br&gt;
&lt;div class="outline-text-5" id="text-org9960d0c"&gt;
&lt;p&gt;
In this case, our method will quit as soon as any element passes so if we reach the end that means that none of them did so we need to return false.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;bound&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;

&lt;li&gt;&lt;a id="orgb9eb52e"&gt;&lt;/a&gt;The Short-Circuit&lt;br&gt;
&lt;div class="outline-text-5" id="text-orgb9eb52e"&gt;
&lt;p&gt;
As soon as an element is in &lt;code&gt;s&lt;/code&gt; and passes &lt;code&gt;p&lt;/code&gt; we can return true.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
The rest of the method looks the same as &lt;code&gt;forall&lt;/code&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a id="org8bfd83e"&gt;&lt;/a&gt;The Whole Thing&lt;br&gt;
&lt;div class="outline-text-5" id="text-org8bfd83e"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;exists&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;FunSet&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Boolean&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Boolean&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;iter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Boolean&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;bound&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="kc"&gt;true&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;iter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="n"&gt;iter&lt;/span&gt;&lt;span class="o"&gt;(-&lt;/span&gt;&lt;span class="n"&gt;bound&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id="outline-container-org3fd82dd" class="outline-4"&gt;
&lt;h4 id="org3fd82dd"&gt;Map&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org3fd82dd"&gt;
&lt;blockquote&gt;
&lt;p&gt;
Finally, using forall or exists, write a function map which transforms a given set into another one by applying to each of its elements the given function. map has the following signature:
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
Once again, rather than re-using the previous methods exactly I'm going to use their spirit. This time I'll use the accumulator pattern to turn the inner function to a tail-recursive one.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;iter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;accumulator&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Set&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;])&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Set&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a id="orge4c6cab"&gt;&lt;/a&gt;Base Case&lt;br&gt;
&lt;div class="outline-text-5" id="text-orge4c6cab"&gt;
&lt;p&gt;
Since we have an &lt;code&gt;accumulator&lt;/code&gt; that holds the set of mapped values, when we reach the end we just return it.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;bound&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="n"&gt;accumulator&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a id="orge5ac958"&gt;&lt;/a&gt;Updating the Accumulator&lt;br&gt;
&lt;div class="outline-text-5" id="text-orge5ac958"&gt;
&lt;p&gt;
If the next element is in &lt;code&gt;s&lt;/code&gt; we need to add the mapped value for the element to the accumulator and make the next recursive call. Alternatively you could just update the accumulator, but then you'd have an extra variable.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="n"&gt;iter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;accumulator&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a id="orge1a5073"&gt;&lt;/a&gt;The Recursive Call&lt;br&gt;
&lt;div class="outline-text-5" id="text-orge1a5073"&gt;
&lt;p&gt;
This is like the other methods except we have to pass the accumulator.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;iter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;accumulator&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;

&lt;li&gt;&lt;a id="org394cbce"&gt;&lt;/a&gt;Calling the Inner Function&lt;br&gt;
&lt;div class="outline-text-5" id="text-org394cbce"&gt;
&lt;p&gt;
To initialize the accumulator, I pass in an empty set of type integer (by creating a set with an integer and then empyting it).
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;iter&lt;/span&gt;&lt;span class="o"&gt;(-&lt;/span&gt;&lt;span class="n"&gt;bound&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;Set&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="n"&gt;empty&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;FunSet&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;FunSet&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Extra Hints
&lt;/p&gt;

&lt;p&gt;
Be attentive in the video lectures on how to write anonymous functions in Scala.
Sets are represented as functions. Think about what it means for an element to belong to a set, in terms of function evaluation. For example, how do you represent a set that contains all numbers between 1 and 100?
Most of the solutions for this assignment can be written as one-liners. If you have more, you probably need to rethink your solution. In other words, this assignment needs more thinking (whiteboard, pen and paper) than coding ;-).
If you are having some trouble with terminology, have a look at the &lt;a href="https://docs.scala-lang.org/glossary/"&gt;glossary&lt;/a&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>scala</category><category>sets</category><guid>https://necromuralist.github.io/Functional-Scala/posts/course-1/sets/</guid><pubDate>Sun, 15 Dec 2019 02:10:15 GMT</pubDate></item><item><title>Traits Are Closer To Abstract Classes</title><link>https://necromuralist.github.io/Functional-Scala/posts/hello-scala/traits-are-closer-to-abstract-classes/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Functional-Scala/posts/hello-scala/traits-are-closer-to-abstract-classes/#org0f7f227"&gt;Beginning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Functional-Scala/posts/hello-scala/traits-are-closer-to-abstract-classes/#orgfa17e06"&gt;Middle&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Functional-Scala/posts/hello-scala/traits-are-closer-to-abstract-classes/#org8517477"&gt;Abstract and Concrete Methods&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Functional-Scala/posts/hello-scala/traits-are-closer-to-abstract-classes/#orgd66fb2a"&gt;Traits&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Functional-Scala/posts/hello-scala/traits-are-closer-to-abstract-classes/#org853af7b"&gt;Boy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Functional-Scala/posts/hello-scala/traits-are-closer-to-abstract-classes/#org209603c"&gt;A Girl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Functional-Scala/posts/hello-scala/traits-are-closer-to-abstract-classes/#orga85b5b7"&gt;A Werewolf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Functional-Scala/posts/hello-scala/traits-are-closer-to-abstract-classes/#orgcb5a846"&gt;But There's Also An Abstract Class&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Functional-Scala/posts/hello-scala/traits-are-closer-to-abstract-classes/#orgf36b26a"&gt;End&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org0f7f227" class="outline-2"&gt;
&lt;h2 id="org0f7f227"&gt;Beginning&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org0f7f227"&gt;
&lt;p&gt;
Traits are both similar and different from &lt;a href="https://docs.oracle.com/javase/tutorial/java/concepts/interface.html"&gt;Interfaces&lt;/a&gt; and &lt;a href="https://docs.oracle.com/javase/tutorial/java/IandI/abstract.html"&gt;Abstract Classes&lt;/a&gt;. Like Interfaces, traits don't take arguments, but unlike interfaces and like Abstract Classes, traits can implement some methods and leave others abstract. Traits also support multiple inheritance and you can add them to objects that are created from Classes that don't extend them in their definition.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgfa17e06" class="outline-2"&gt;
&lt;h2 id="orgfa17e06"&gt;Middle&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgfa17e06"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org8517477" class="outline-3"&gt;
&lt;h3 id="org8517477"&gt;Abstract and Concrete Methods&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org8517477"&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgd66fb2a" class="outline-4"&gt;
&lt;h4 id="orgd66fb2a"&gt;Traits&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgd66fb2a"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;trait Child {
  def speak(): Unit = println("Never. I must be seen but not heard.")
  def come_to_me(): Unit
}
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
This trait has a concrete method (&lt;code&gt;speak&lt;/code&gt;) and an abstract method &lt;code&gt;come_to_me&lt;/code&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org853af7b" class="outline-4"&gt;
&lt;h4 id="org853af7b"&gt;Boy&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org853af7b"&gt;
&lt;p&gt;
If you don't implement the &lt;code&gt;come_to_me&lt;/code&gt; method then the next definition will be rejected by the compiler.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;class Boy(name: String) extends Child {
  def come_to_me(): Unit = println(s"I, $name, will be there at once.")
}
&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;val boy = new Boy("Alphonse")
boy.speak()
boy.come_to_me()
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
Never. I must be seen but not heard.
I, Alphonse, will be there at once.

&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org209603c" class="outline-4"&gt;
&lt;h4 id="org209603c"&gt;A Girl&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org209603c"&gt;
&lt;p&gt;
You can also implement the &lt;code&gt;speak&lt;/code&gt; method, but since it's concrete you need to override it instead of just implement it.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;class Girl extends Child {
  override def speak(): Unit = println("Whatever...")
  def come_to_me(): Unit = println("As if.")
}
&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;val girl = new Girl
girl.speak
girl.come_to_me
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
Whatever...
As if.

&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orga85b5b7" class="outline-4"&gt;
&lt;h4 id="orga85b5b7"&gt;A Werewolf&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orga85b5b7"&gt;
&lt;p&gt;
You can also add a trait to an existing class.
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;trait Tail {
  def wag(): Unit = println("I'm quite happy.")
}
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Now we can add it to a Boy object using &lt;code&gt;with&lt;/code&gt; (because it already &lt;code&gt;extends&lt;/code&gt; &lt;code&gt;Child&lt;/code&gt;).
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;val wolfboy = new Boy("Benji") with Tail

wolfboy.speak
wolfboy.come_to_me
wolfboy.wag
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
Never. I must be seen but not heard.
I, Benji, will be there at once.
I'm quite happy.

&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgcb5a846" class="outline-3"&gt;
&lt;h3 id="orgcb5a846"&gt;But There's Also An Abstract Class&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgcb5a846"&gt;
&lt;p&gt;
Scala also provides an Abstract Class, this is to handle two cases:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;You want to define arguments to the constructor in the base class&lt;/li&gt;
&lt;li&gt;You want to call scala code from Java&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
One thing to note about traits is that they don't take arguments to the constructor so if you want to define some in the base class you need to use the &lt;code&gt;abstract class&lt;/code&gt; type instead of a trait. The trade-off is that Abstract Classes don't support multiple inheritance the way that traits do (so our wolfboy would need a separate abstract class since it has both Child and Tail traits), so you'll lose something if you choose to use them.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgf36b26a" class="outline-2"&gt;
&lt;h2 id="orgf36b26a"&gt;End&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgf36b26a"&gt;
&lt;p&gt;
Being mostly a python programmer I'm not totally certain what Interfaces are for, but luckily, with traits, we can have the best of both Interfaces and Abstract Classes together.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>hello scala</category><category>scala</category><category>traits</category><guid>https://necromuralist.github.io/Functional-Scala/posts/hello-scala/traits-are-closer-to-abstract-classes/</guid><pubDate>Tue, 10 Dec 2019 00:53:28 GMT</pubDate></item><item><title>Traits As Interfaces</title><link>https://necromuralist.github.io/Functional-Scala/posts/hello-scala/traits-as-interfaces/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Functional-Scala/posts/hello-scala/traits-as-interfaces/#orge8f3e30"&gt;Beginning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Functional-Scala/posts/hello-scala/traits-as-interfaces/#org7e58b83"&gt;Middle&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Functional-Scala/posts/hello-scala/traits-as-interfaces/#org9b860ef"&gt;Some Traits&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Functional-Scala/posts/hello-scala/traits-as-interfaces/#org5a6c718"&gt;Create a Cow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Functional-Scala/posts/hello-scala/traits-as-interfaces/#orga54de85"&gt;End&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orge8f3e30" class="outline-2"&gt;
&lt;h2 id="orge8f3e30"&gt;Beginning&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orge8f3e30"&gt;
&lt;p&gt;
This is a look at Scala traits. The traits look sort of like abstract base classes, but they are used here to define "parts" for classes that can then be implemented to create a specific type.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org7e58b83" class="outline-2"&gt;
&lt;h2 id="org7e58b83"&gt;Middle&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org7e58b83"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org9b860ef" class="outline-3"&gt;
&lt;h3 id="org9b860ef"&gt;Some Traits&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org9b860ef"&gt;
&lt;p&gt;
These are some traits to make up an animal. Viewed in this context, the name "traits" makes sense - each trait defines a different aspect of the animal class.
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;trait Tail {
  def wag(): Unit
  def stop_wagging(): Unit
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
&lt;b&gt;&lt;b&gt;Note:&lt;/b&gt;&lt;/b&gt; I originally called those methods &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;stop&lt;/code&gt; but when you create the class all the methods are going to get a concrete definition, so you don't want them to be too generic or they might clash across different traits.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;trait Legs {
  def move(): Unit
  def stand(): Unit
}
&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;trait Voice {
 def speak(): String
}
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Now when you create the class you can extend one of the traits and add more using the &lt;code&gt;with&lt;/code&gt; keyword, implementing the methods in a way that makes sense for the concrete class.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;class Cow extends Tail with Legs with Voice {
  // Tail trait
  def wag(): Unit = {println("I'm wagging my tail")}
  def stop_wagging(): Unit = {println("my tail is stilled")}

  // Legs trait
  def move(): Unit = {println("trotting")}
  def stand(): Unit = {println("standing still")}

  // Voice trait
  def speak(): String = "moo"
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org5a6c718" class="outline-3"&gt;
&lt;h3 id="org5a6c718"&gt;Create a Cow&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org5a6c718"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;val cow = new Cow()
cow.wag
cow.move
cow.stop_wagging
cow.stand
println(cow.speak)
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
I'm wagging my tail
trotting
my tail is stilled
standing still
moo

&lt;/pre&gt;

&lt;p&gt;
One thing to note here is that I had a misspelling in that previous code block and ob-ipython failed to execute the block but didn't tell me what the error was. Luckily if you open the REPL you can start poking around (it opens an ammonite REPL) and maybe figure out what's failing.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orga54de85" class="outline-2"&gt;
&lt;h2 id="orga54de85"&gt;End&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orga54de85"&gt;
&lt;p&gt;
So that's traits. There's a lot more to them, I'm sure, but that's enoug for now.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>hello scala</category><category>scala</category><category>traits</category><guid>https://necromuralist.github.io/Functional-Scala/posts/hello-scala/traits-as-interfaces/</guid><pubDate>Mon, 09 Dec 2019 23:22:52 GMT</pubDate></item><item><title>OB-Ipython With Scala (a test)</title><link>https://necromuralist.github.io/Functional-Scala/posts/exploring/ob-ipython-with-scala-a-test/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Functional-Scala/posts/exploring/ob-ipython-with-scala-a-test/#org4d2e75d"&gt;Beginning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Functional-Scala/posts/exploring/ob-ipython-with-scala-a-test/#org85d9e7d"&gt;Middle&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Functional-Scala/posts/exploring/ob-ipython-with-scala-a-test/#org4a5df70"&gt;The Traditional Ipython Block&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Functional-Scala/posts/exploring/ob-ipython-with-scala-a-test/#orge6406fb"&gt;The Jupyter Block&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Functional-Scala/posts/exploring/ob-ipython-with-scala-a-test/#org3c91346"&gt;End&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org4d2e75d" class="outline-2"&gt;
&lt;h2 id="org4d2e75d"&gt;Beginning&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org4d2e75d"&gt;
&lt;p&gt;
This is a test of using &lt;a href="https://github.com/gregsexton/ob-ipython"&gt;ob-ipython&lt;/a&gt; with the scala kernel (provided by &lt;a href="https://almond.sh/"&gt;Almond&lt;/a&gt;, so that has to be installed first).
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org85d9e7d" class="outline-2"&gt;
&lt;h2 id="org85d9e7d"&gt;Middle&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org85d9e7d"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org4a5df70" class="outline-3"&gt;
&lt;h3 id="org4a5df70"&gt;The Traditional Ipython Block&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org4a5df70"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;println("testing")
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
testing

&lt;/pre&gt;

&lt;p&gt;
Surprisingly, that worked (although it's very slow).
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orge6406fb" class="outline-3"&gt;
&lt;h3 id="orge6406fb"&gt;The Jupyter Block&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orge6406fb"&gt;
&lt;p&gt;
According to the documentation for &lt;code&gt;ob-ipython&lt;/code&gt; it's being transitioned over to using &lt;code&gt;jupyter&lt;/code&gt; instead of &lt;code&gt;ipython&lt;/code&gt; so there's a new type of source-block to use.
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;val x = 5
println(s"x is $x")
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
x is 5

&lt;/pre&gt;

&lt;p&gt;
This produces the error &lt;code&gt;No org-babel-execute function for jupyter-scala!&lt;/code&gt; unless you remove &lt;code&gt;(jupyter . t)&lt;/code&gt; from the org-babel setup block in &lt;code&gt;init.el&lt;/code&gt;. It looks like it won't co-exist with &lt;a href="https://github.com/dzop/emacs-jupyter"&gt;emacs-jupyter&lt;/a&gt; I'll have to decide if that project has improved enough to start using it again. I just noticed that ob-ipython hasn't been updated in a couple of years, so this "experimental" support might never be more than that. Still, it's good to know that it works.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org3c91346" class="outline-2"&gt;
&lt;h2 id="org3c91346"&gt;End&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org3c91346"&gt;
&lt;p&gt;
Not very exciting, in what it does (other than work). I'll stick with ob-ipython for now and see if &lt;code&gt;emacs-jupyter&lt;/code&gt; works as well - in my previous experiment with it it didn't seem to be quite ready.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>ob-ipython</category><category>scala</category><category>setup</category><guid>https://necromuralist.github.io/Functional-Scala/posts/exploring/ob-ipython-with-scala-a-test/</guid><pubDate>Mon, 09 Dec 2019 20:51:18 GMT</pubDate></item><item><title>Almond Test</title><link>https://necromuralist.github.io/Functional-Scala/posts/exploring/almond-test/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;div&gt;&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h2 id="Scala-In-Jupyter"&gt;Scala In Jupyter&lt;a class="anchor-link" href="https://necromuralist.github.io/Functional-Scala/posts/exploring/almond-test/#Scala-In-Jupyter"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;This is a Test of &lt;a href="https://almond.sh/"&gt;Almond&lt;/a&gt; which provides a Jupyter kernel for Scala. In this case I created the notebook as a post in nikola using this command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;nikola new_post -f ipynb@scala -t "Almond Test"&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;@scala&lt;/code&gt; tells nikola which kernel to set (otherwise it defaults to the Python 3 kernel).&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h3 id="A-Pizza-Test"&gt;A Pizza Test&lt;a class="anchor-link" href="https://necromuralist.github.io/Functional-Scala/posts/exploring/almond-test/#A-Pizza-Test"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;This is from the book &lt;a href="https://alvinalexander.com/scala/hello-scala-introduction-to-scala-book"&gt;Hello, Scala&lt;/a&gt; by Alvin Alexander. The page I linked to says that it's only available in physical format, but if you look in the "Related" section below it there's currently a post about the book being available as a PDF for free (which is the version I'm using). I bought his &lt;a href="https://alvinalexander.com/scala/functional-programming-simplified-book"&gt;Functional Programming Simplified&lt;/a&gt; and will probably get his &lt;a href="http://shop.oreilly.com/product/0636920026914.do"&gt;Scala Cookbook&lt;/a&gt; but since I'm not a Scala programmer I thought I'd start with this book.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h4 id="Enumerations"&gt;&lt;em&gt;Enumerations&lt;/em&gt;&lt;a class="anchor-link" href="https://necromuralist.github.io/Functional-Scala/posts/exploring/almond-test/#Enumerations"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [2]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-scala"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;sealed&lt;/span&gt; &lt;span class="k"&gt;trait&lt;/span&gt; &lt;span class="nc"&gt;Topping&lt;/span&gt;
&lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="k"&gt;object&lt;/span&gt; &lt;span class="nc"&gt;CasuMarzu&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;Topping&lt;/span&gt;
&lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="k"&gt;object&lt;/span&gt; &lt;span class="nc"&gt;JuneBugs&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;Topping&lt;/span&gt;
&lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="k"&gt;object&lt;/span&gt; &lt;span class="nc"&gt;Chapulines&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;Topping&lt;/span&gt;
&lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="k"&gt;object&lt;/span&gt; &lt;span class="nc"&gt;Tofu&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;Topping&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;

    &lt;div class="prompt output_prompt"&gt;Out[2]:&lt;/div&gt;




&lt;div class="output_text output_subarea output_execute_result"&gt;
&lt;pre&gt;defined &lt;span class="ansi-green-fg"&gt;trait&lt;/span&gt; &lt;span class="ansi-cyan-fg"&gt;Topping&lt;/span&gt;
defined &lt;span class="ansi-green-fg"&gt;object&lt;/span&gt; &lt;span class="ansi-cyan-fg"&gt;CasuMarzu&lt;/span&gt;
defined &lt;span class="ansi-green-fg"&gt;object&lt;/span&gt; &lt;span class="ansi-cyan-fg"&gt;JuneBugs&lt;/span&gt;
defined &lt;span class="ansi-green-fg"&gt;object&lt;/span&gt; &lt;span class="ansi-cyan-fg"&gt;Chapulines&lt;/span&gt;
defined &lt;span class="ansi-green-fg"&gt;object&lt;/span&gt; &lt;span class="ansi-cyan-fg"&gt;Tofu&lt;/span&gt;
defined &lt;span class="ansi-green-fg"&gt;object&lt;/span&gt; &lt;span class="ansi-cyan-fg"&gt;Anchovies&lt;/span&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [3]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-scala"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;sealed&lt;/span&gt; &lt;span class="k"&gt;trait&lt;/span&gt; &lt;span class="nc"&gt;CrustSize&lt;/span&gt;
&lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="k"&gt;object&lt;/span&gt; &lt;span class="nc"&gt;Small&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;CrustSize&lt;/span&gt;
&lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="k"&gt;object&lt;/span&gt; &lt;span class="nc"&gt;Medium&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;CrustSize&lt;/span&gt;
&lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="k"&gt;object&lt;/span&gt; &lt;span class="nc"&gt;Large&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;CrustSize&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;

    &lt;div class="prompt output_prompt"&gt;Out[3]:&lt;/div&gt;




&lt;div class="output_text output_subarea output_execute_result"&gt;
&lt;pre&gt;defined &lt;span class="ansi-green-fg"&gt;trait&lt;/span&gt; &lt;span class="ansi-cyan-fg"&gt;CrustSize&lt;/span&gt;
defined &lt;span class="ansi-green-fg"&gt;object&lt;/span&gt; &lt;span class="ansi-cyan-fg"&gt;Small&lt;/span&gt;
defined &lt;span class="ansi-green-fg"&gt;object&lt;/span&gt; &lt;span class="ansi-cyan-fg"&gt;Medium&lt;/span&gt;
defined &lt;span class="ansi-green-fg"&gt;object&lt;/span&gt; &lt;span class="ansi-cyan-fg"&gt;Large&lt;/span&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [5]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-scala"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;sealed&lt;/span&gt; &lt;span class="k"&gt;trait&lt;/span&gt; &lt;span class="nc"&gt;CrustType&lt;/span&gt;
&lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="k"&gt;object&lt;/span&gt; &lt;span class="nc"&gt;Neapolitan&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;CrustType&lt;/span&gt;
&lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="k"&gt;object&lt;/span&gt; &lt;span class="nc"&gt;DeepDish&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;CrustType&lt;/span&gt;
&lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="k"&gt;object&lt;/span&gt; &lt;span class="nc"&gt;Sicilian&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;CrustType&lt;/span&gt;
&lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="k"&gt;object&lt;/span&gt; &lt;span class="nc"&gt;Cardboard&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;CrustType&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;

    &lt;div class="prompt output_prompt"&gt;Out[5]:&lt;/div&gt;




&lt;div class="output_text output_subarea output_execute_result"&gt;
&lt;pre&gt;defined &lt;span class="ansi-green-fg"&gt;trait&lt;/span&gt; &lt;span class="ansi-cyan-fg"&gt;CrustType&lt;/span&gt;
defined &lt;span class="ansi-green-fg"&gt;object&lt;/span&gt; &lt;span class="ansi-cyan-fg"&gt;Neapolitan&lt;/span&gt;
defined &lt;span class="ansi-green-fg"&gt;object&lt;/span&gt; &lt;span class="ansi-cyan-fg"&gt;DeepDish&lt;/span&gt;
defined &lt;span class="ansi-green-fg"&gt;object&lt;/span&gt; &lt;span class="ansi-cyan-fg"&gt;Sicilian&lt;/span&gt;
defined &lt;span class="ansi-green-fg"&gt;object&lt;/span&gt; &lt;span class="ansi-cyan-fg"&gt;Cardboard&lt;/span&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h4 id="The-Pizza-Class"&gt;The Pizza Class&lt;a class="anchor-link" href="https://necromuralist.github.io/Functional-Scala/posts/exploring/almond-test/#The-Pizza-Class"&gt;¶&lt;/a&gt;&lt;/h4&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [6]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-scala"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Pizza&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;crust_size&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;CrustSize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nc"&gt;Medium&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;crust_type&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;CrustType&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nc"&gt;Cardboard&lt;/span&gt; &lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;toppings&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="n"&gt;scala&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;collection&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mutable&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;ArrayBuffer&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Topping&lt;/span&gt;&lt;span class="o"&gt;]()&lt;/span&gt;
    
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;topping&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Topping&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Unit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;toppings&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;topping&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;remove&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;topping&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Topping&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Unit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="n"&gt;toppings&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="n"&gt;topping&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;clear_toppings&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Unit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;toppings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;clear&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;override&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;toString&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;s"""&lt;/span&gt;
&lt;span class="s"&gt;        |Crust Size: &lt;/span&gt;&lt;span class="si"&gt;$crust_size&lt;/span&gt;&lt;span class="s"&gt;&lt;/span&gt;
&lt;span class="s"&gt;        |Crust Type: &lt;/span&gt;&lt;span class="si"&gt;$crust_type&lt;/span&gt;&lt;span class="s"&gt;&lt;/span&gt;
&lt;span class="s"&gt;        |Toppings: &lt;/span&gt;&lt;span class="si"&gt;$toppings&lt;/span&gt;&lt;span class="s"&gt;&lt;/span&gt;
&lt;span class="s"&gt;        """&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stripMargin&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;

    &lt;div class="prompt output_prompt"&gt;Out[6]:&lt;/div&gt;




&lt;div class="output_text output_subarea output_execute_result"&gt;
&lt;pre&gt;defined &lt;span class="ansi-green-fg"&gt;class&lt;/span&gt; &lt;span class="ansi-cyan-fg"&gt;Pizza&lt;/span&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [8]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-scala"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;pizza&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Pizza&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;crust_type&lt;/span&gt;&lt;span class="k"&gt;=&lt;/span&gt;&lt;span class="nc"&gt;Sicilian&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;pizza&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Chapulines&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;pizza&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;CasuMarzu&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;pizza&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Tofu&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pizza&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;

    &lt;div class="prompt"&gt;&lt;/div&gt;


&lt;div class="output_subarea output_stream output_stdout output_text"&gt;
&lt;pre&gt;
Crust Size: Medium
Crust Type: Sicilian
Toppings: ArrayBuffer(Chapulines, CasuMarzu, Tofu)
        
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_area"&gt;

    &lt;div class="prompt output_prompt"&gt;Out[8]:&lt;/div&gt;




&lt;div class="output_text output_subarea output_execute_result"&gt;
&lt;pre&gt;&lt;span class="ansi-cyan-fg"&gt;pizza&lt;/span&gt;: &lt;span class="ansi-green-fg"&gt;Pizza&lt;/span&gt; = 
Crust Size: Medium
Crust Type: Sicilian
Toppings: ArrayBuffer(Chapulines, CasuMarzu, Tofu)
        &lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [9]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-scala"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;pizza&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remove&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Tofu&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pizza&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;pizza&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;clear_toppings&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;pizza&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;crust_size&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Large&lt;/span&gt;
&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pizza&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;

    &lt;div class="prompt"&gt;&lt;/div&gt;


&lt;div class="output_subarea output_stream output_stdout output_text"&gt;
&lt;pre&gt;
Crust Size: Medium
Crust Type: Sicilian
Toppings: ArrayBuffer(Chapulines, CasuMarzu)
        

Crust Size: Large
Crust Type: Sicilian
Toppings: ArrayBuffer()
        &lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h3 id="Conclusion"&gt;Conclusion&lt;a class="anchor-link" href="https://necromuralist.github.io/Functional-Scala/posts/exploring/almond-test/#Conclusion"&gt;¶&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;This post is my first attempt to get scala into nikola. Along the way I created some enumerations using /sealed traits/ - there appears to be an Enumeration type, but that's not what the book used. I also showed the basicso of creating a class in Scala.&lt;/p&gt;
&lt;p&gt;Although the syntax is similar to the python that I'm used to, in some ways, the definition of the methods is still somewhat odd to me.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;The next big thing would be to get it to work with &lt;a href="https://github.com/gregsexton/ob-ipython"&gt;ob-ipython&lt;/a&gt; or maybe &lt;a href="https://github.com/dzop/emacs-jupyter"&gt;emacs-jupyter&lt;/a&gt;.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [ ]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-scala"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

    &lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;&lt;/div&gt;</description><guid>https://necromuralist.github.io/Functional-Scala/posts/exploring/almond-test/</guid><pubDate>Mon, 09 Dec 2019 01:44:05 GMT</pubDate></item><item><title>Recursion</title><link>https://necromuralist.github.io/Functional-Scala/posts/course-1/recursion/</link><dc:creator>Cloistered Monkey</dc:creator><description>&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Functional-Scala/posts/course-1/recursion/#orgc3e7d98"&gt;Begin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Functional-Scala/posts/course-1/recursion/#orga62b29f"&gt;Middle&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Functional-Scala/posts/course-1/recursion/#org7e46da3"&gt;Exercise 1: Pascal’s Triangle&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Functional-Scala/posts/course-1/recursion/#orgd5c008c"&gt;Pascal Tester&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Functional-Scala/posts/course-1/recursion/#org88858be"&gt;Naively Recursive Version&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Functional-Scala/posts/course-1/recursion/#org6ee6ed0"&gt;Tail-Recursion Version&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Functional-Scala/posts/course-1/recursion/#orgb3eec96"&gt;Exercise 2: Parentheses Balancing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Functional-Scala/posts/course-1/recursion/#org41ab029"&gt;Exercise 3: Counting Change&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://necromuralist.github.io/Functional-Scala/posts/course-1/recursion/#org24e2f42"&gt;End&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgc3e7d98" class="outline-2"&gt;
&lt;h2 id="orgc3e7d98"&gt;Begin&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orgc3e7d98"&gt;
&lt;p&gt;
This is a set of exercises to implement methods using recursion - and tail recursion when possible.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-orga62b29f" class="outline-2"&gt;
&lt;h2 id="orga62b29f"&gt;Middle&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-orga62b29f"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org7e46da3" class="outline-3"&gt;
&lt;h3 id="org7e46da3"&gt;Exercise 1: Pascal’s Triangle&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org7e46da3"&gt;
&lt;p&gt;
The following pattern of numbers is called Pascal’s triangle.
&lt;/p&gt;

&lt;pre class="example"&gt;
    1
   1 1
  1 2 1
 1 3 3 1
1 4 6 4 1
&lt;/pre&gt;

&lt;p&gt;
The numbers at the edge of the triangle are all 1, and each number inside the triangle is the sum of the two numbers above it. Write a function that computes the elements of Pascal’s triangle by means of a recursive process.
&lt;/p&gt;

&lt;p&gt;
Do this exercise by implementing the pascal function in Main.scala, which takes a column c and a row r, counting from 0 and returns the number at that spot in the triangle. For example, &lt;code&gt;pascal(0,2)=1&lt;/code&gt;, &lt;code&gt;pascal(1,2)=2&lt;/code&gt;, and &lt;code&gt;pascal(1,3)=3&lt;/code&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;div id="outline-container-orgd5c008c" class="outline-4"&gt;
&lt;h4 id="orgd5c008c"&gt;Pascal Tester&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-orgd5c008c"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def test_pascal(function_under_test: (Int, Int) =&amp;gt; Int): Unit = {  
  assert(function_under_test(0, 0) == 1)
  try {
    function_under_test(1, 0)
    throw new AssertionError
  } catch {
    case e: IllegalArgumentException =&amp;gt; println("Passed pascal(0, 1)")
  }

  try {
    function_under_test(-2, -1)
    throw new AssertionError
  } catch {
    case e: IllegalArgumentException =&amp;gt; println("Passed pascal(0, -1)")
  }

  try {
    function_under_test(-1, 0)
    throw new AssertionError
  } catch {
    case e: IllegalArgumentException =&amp;gt; println("Passed pascal(-1, 0)")
  }

  assert(function_under_test(0, 2) == 1)
  assert(function_under_test(1, 2) == 2)
  assert(function_under_test(1, 3) == 3)
  assert(function_under_test(3, 5) == 10)
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org88858be" class="outline-4"&gt;
&lt;h4 id="org88858be"&gt;Naively Recursive Version&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org88858be"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def pascal_1(c: Int, r: Int): Int = c match {
      case 0 =&amp;gt; {
	require(c &amp;lt;= r)
	1
      }
      case _ =&amp;gt; {
	require(c &amp;lt;= r)
	require(c &amp;gt;= 0)
	pascal(c - 1, r) * (r + 1 - c)/c
      }
}
&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;test_pascal(pascal_1)
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
6 - 7a489557-893d-47dd-9459-92a57291515b
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org6ee6ed0" class="outline-4"&gt;
&lt;h4 id="org6ee6ed0"&gt;Tail-Recursion Version&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-org6ee6ed0"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def pascal(c: Int, r: Int): Int = {
    @annotation.tailrec
    def pascal_accumulated(column: Int, row: Int, accumulator: Int): Int = column match{
      case 0 =&amp;gt; {
	require(column &amp;lt;= row)
	accumulator
      }
      case _ =&amp;gt; {
	require(column &amp;lt;= row)
	require(column &amp;gt;= 0)
	pascal_accumulated(column - 1, row, accumulator * (row + 1 - column)/column)
      }
    } // pascal_accumulated
    pascal_accumulated(c, r, 1)
}
&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;test_pascal(pascal)
&lt;/pre&gt;&lt;/div&gt;

&lt;pre class="example"&gt;
8 - 9656bc37-fd80-4110-9d6f-f7e77b546f8f
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgb3eec96" class="outline-3"&gt;
&lt;h3 id="orgb3eec96"&gt;Exercise 2: Parentheses Balancing&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-orgb3eec96"&gt;
&lt;p&gt;
Write a recursive function which verifies the balancing of parentheses in a string, which we represent as a List[Char] not a String. For example, the function should return true for the following strings:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;(if (zero? x) max (/ 1 x))&lt;/li&gt;
&lt;li&gt;I told him (that it’s not (yet) done). (But he wasn’t listening)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
The function should return false for the following strings:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;:-)&lt;/li&gt;
&lt;li&gt;())(&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
The last example shows that it’s not enough to verify that a string contains the same number of opening and closing parentheses.
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def test_balance(function_under_test: (List[Char]) =&amp;gt; Boolean): Unit = {
    assert(function_under_test("".toList))
    println("Passed Empty List")
    assert(!function_under_test("(".toList))
    println("Passed left bracket only")
    assert(balance("(if (zero? x) max (/ 1 x))".toList))
    assert(balance("I told him (that it's not (yet) done).\n(But he wasn't listening)".toList))
    assert(!balance(":-)".toList))
    assert(!balance("())(".toList))
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
Do this exercise by implementing the balance function in Main.scala. Its signature is as follows:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def balance(chars: List[Char]): Boolean = {
  @annotation.tailrec
  def balance_accumulated(chars: List[Char], lefts: Int, rights: Int): Boolean = chars match {
    case Nil =&amp;gt; lefts == rights
    case head :: tail =&amp;gt; {
      val left = if (head == '(') 1 else 0
      val right = if (head == ')') 1 else 0
      if (right + rights &amp;gt; left + lefts)
	false
      else
	balance_accumulated(tail, lefts + left, rights + right)

    }
  } // balance_accumulated
  balance_accumulated(chars, 0, 0)
}
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
There are three methods on List[Char] that are useful for this exercise:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;chars.isEmpty: Boolean returns whether a list is empty&lt;/li&gt;
&lt;li&gt;chars.head: Char returns the first element of the list&lt;/li&gt;
&lt;li&gt;chars.tail: List[Char] returns the list without the first element&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Hint: you can define an inner function if you need to pass extra parameters to your function.
&lt;/p&gt;

&lt;p&gt;
Testing: You can use the toList method to convert from a String to aList[Char]: e.g. "(just an) example".toList.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;test_balance(balance)
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org41ab029" class="outline-3"&gt;
&lt;h3 id="org41ab029"&gt;Exercise 3: Counting Change&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-org41ab029"&gt;
&lt;p&gt;
Write a recursive function that counts how many different ways you can make change for an amount, given a list of coin denominations. For example, there are 3 ways to give change for 4 if you have coins with denomination 1 and 2: 1+1+1+1, 1+1+2, 2+2.
&lt;/p&gt;

&lt;p&gt;
Do this exercise by implementing the countChange function inMain.scala. This function takes an amount to change, and a list of unique denominations for the coins. Its signature is as follows:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;countChange&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;money&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;coins&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;List&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;])&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Once again, you can make use of functions isEmpty, head and tail on the list of integers coins.
&lt;/p&gt;

&lt;p&gt;
&lt;b&gt;&lt;b&gt;Hint&lt;/b&gt;&lt;/b&gt;: Think of the degenerate cases. How many ways can you give change for 0 CHF(swiss money)? How many ways can you give change for &amp;gt;0 CHF, if you have no coins?
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org24e2f42" class="outline-2"&gt;
&lt;h2 id="org24e2f42"&gt;End&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-org24e2f42"&gt;
&lt;p&gt;
I only got 9/10 for this - there's two test cases that I haven't passed yet.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>course 1</category><guid>https://necromuralist.github.io/Functional-Scala/posts/course-1/recursion/</guid><pubDate>Sun, 08 Dec 2019 03:49:38 GMT</pubDate></item></channel></rss>